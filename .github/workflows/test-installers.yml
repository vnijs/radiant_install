name: Test Installation Scripts

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-windows:
    runs-on: windows-latest
    name: Test Windows Installer
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test PowerShell script syntax
        shell: powershell
        run: |
          Write-Host "Testing PowerShell script syntax..."
          $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content .\windows-install-radiant.ps1 -Raw), [ref]$null)
          Write-Host "‚úÖ Script syntax is valid"

      - name: Test script in dry-run mode (modified for CI)
        shell: powershell
        run: |
          Write-Host "Creating test version of script..."
          Write-Host "TEST MODE - Checking script logic without installing" -ForegroundColor Cyan
          Write-Host ""
          
          $ErrorActionPreference = "Stop"
          
          # Test temp directory creation
          $TEMP_DIR = New-TemporaryFile | ForEach-Object { Remove-Item $_; New-Item -ItemType Directory -Path $_ }
          Write-Host "‚úÖ Temp directory created: $TEMP_DIR"
          
          # Test R detection logic
          $SystemDrive = $env:SystemDrive
          Write-Host "‚úÖ System drive detected: $SystemDrive"
          
          # Test version checking
          Write-Host "Testing R version check..."
          try {
              $Response = Invoke-WebRequest -Uri "https://cloud.r-project.org/bin/windows/base/release.html" -MaximumRedirection 0 -ErrorAction SilentlyContinue
          } catch {
              if ($_.Exception.Response.StatusCode -eq 302) {
                  $RURL = $_.Exception.Response.Headers.Location.ToString()
                  if ($RURL -match "R-(\d+\.\d+\.\d+)-win.exe") {
                      Write-Host "‚úÖ Latest R version detected: $($matches[1])"
                      Write-Host "‚úÖ Download URL: $RURL"
                  }
              }
          }
          
          Write-Host "Testing RStudio version check..."
          $RStudioPage = Invoke-WebRequest -Uri "https://posit.co/download/rstudio-desktop/" -UseBasicParsing
          if ($RStudioPage.Content -match '//download1\.rstudio\.org/electron/windows/RStudio-([^"]+)\.exe') {
              $RStudioURL = "https:$($matches[0])"
              $Version = $matches[1] -replace '-', '+'
              Write-Host "‚úÖ Latest RStudio version detected: $Version"
              Write-Host "‚úÖ Download URL: $RStudioURL"
          }
          
          # Cleanup
          Remove-Item -Path $TEMP_DIR -Recurse -Force -ErrorAction SilentlyContinue
          Write-Host "‚úÖ Cleanup successful"
          
          Write-Host ""
          Write-Host "‚úÖ All script logic tests passed!" -ForegroundColor Green

      - name: Check required tools availability
        shell: powershell
        run: |
          Write-Host "Checking for required Windows tools..."
          
          # Check if Invoke-WebRequest is available
          if (Get-Command Invoke-WebRequest -ErrorAction SilentlyContinue) {
              Write-Host "‚úÖ Invoke-WebRequest is available"
          } else {
              Write-Host "‚ùå Invoke-WebRequest is not available"
              exit 1
          }
          
          # Check if we can query Program Files
          if (Test-Path $env:ProgramFiles) {
              Write-Host "‚úÖ Can access Program Files directory"
          }
          
          # Check PowerShell version
          Write-Host "‚úÖ PowerShell version: $($PSVersionTable.PSVersion)"

  test-macos-dry-run:
    runs-on: macos-latest
    name: Test macOS Installer (Dry Run)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test bash script syntax
        run: |
          echo "Testing bash script syntax..."
          bash -n macos-install-radiant.sh
          echo "‚úÖ Script syntax is valid"

      - name: Test script logic in dry-run mode
        run: |
          echo "Creating test version of script..."
          echo "TEST MODE - Checking script logic without installing"
          echo ""
          
          set -e  # Exit on any error
          
          # Test macOS version check
          echo "Testing macOS version check..."
          macos_version=$(sw_vers -productVersion)
          if [[ $(echo "$macos_version 10.15" | tr " " "\n" | sort -V | head -n1) != "10.15" ]]; then
              echo "‚ùå macOS version check failed"
              exit 1
          fi
          echo "‚úÖ macOS version check passed: $macos_version"
          
          # Test temp directory creation
          TEMP_DIR=$(mktemp -d)
          echo "‚úÖ Temp directory created: $TEMP_DIR"
          
          # Test R version checking
          echo "Testing R version check..."
          LATEST_R_VERSION=$(curl -s "https://cloud.r-project.org/bin/macosx/" | grep -o 'R-[0-9]\+\.[0-9]\+\.[0-9]\+' | head -n1 | cut -d'-' -f2)
          if [[ -n "$LATEST_R_VERSION" ]]; then
              echo "‚úÖ Latest R version detected: $LATEST_R_VERSION"
          else
              echo "‚ùå Could not detect R version"
              exit 1
          fi
          
          # Test RStudio URL extraction
          echo "Testing RStudio version check..."
          RSTUDIO_PAGE=$(curl -s "https://posit.co/download/rstudio-desktop/")
          RSTUDIO_URL="https:$(echo "$RSTUDIO_PAGE" | grep -o '//download1\.rstudio\.org/electron/macos/RStudio-[^"]*\.dmg' | head -n1)"
          if [[ "$RSTUDIO_URL" != "https:" ]]; then
              LATEST_RSTUDIO_VERSION=$(echo "$RSTUDIO_URL" | sed 's/.*RStudio-//' | sed 's/\.dmg//' | sed 's/-/+/')
              echo "‚úÖ Latest RStudio version detected: $LATEST_RSTUDIO_VERSION"
              echo "‚úÖ Download URL: $RSTUDIO_URL"
          else
              echo "‚ùå Could not detect RStudio URL"
              exit 1
          fi
          
          # Cleanup
          rm -rf "$TEMP_DIR"
          echo "‚úÖ Cleanup successful"
          
          echo ""
          echo "‚úÖ All script logic tests passed!"

      - name: Check required tools availability
        run: |
          echo "Checking for required macOS tools..."
          
          # Check for curl
          if command -v curl &> /dev/null; then
              echo "‚úÖ curl is available"
          else
              echo "‚ùå curl is not available"
              exit 1
          fi
          
          # Check for hdiutil (for mounting DMGs)
          if command -v hdiutil &> /dev/null; then
              echo "‚úÖ hdiutil is available"
          else
              echo "‚ùå hdiutil is not available"
              exit 1
          fi
          
          # Check for sw_vers
          if command -v sw_vers &> /dev/null; then
              echo "‚úÖ sw_vers is available: $(sw_vers -productVersion)"
          else
              echo "‚ùå sw_vers is not available"
              exit 1
          fi

  test-macos-full-install:
    runs-on: macos-latest
    name: Test macOS Full Installation
    # Only run full install on manual trigger or main branch
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run full macOS installation
        run: |
          echo "üöÄ Running FULL macOS installation test..."
          echo "This will actually install R, RStudio, and packages"
          echo ""
          
          # Run the actual installation script
          chmod +x macos-install-radiant.sh
          ./macos-install-radiant.sh
          
      - name: Verify installations
        run: |
          echo "Verifying installations..."
          
          # Check R installation
          if command -v R &> /dev/null; then
              R_VERSION=$(R --version | head -n1)
              echo "‚úÖ R installed: $R_VERSION"
          else
              echo "‚ùå R not found"
              exit 1
          fi
          
          # Check RStudio installation
          if [ -d "/Applications/RStudio.app" ]; then
              echo "‚úÖ RStudio installed in /Applications"
          else
              echo "‚ùå RStudio not found in /Applications"
              exit 1
          fi
          
          # Check if key R packages are installed
          R -e "if ('radiant' %in% rownames(installed.packages())) cat('‚úÖ Radiant package installed\n') else stop('‚ùå Radiant package not found')"
          
          # Check if pdflatex is available (from TinyTeX)
          if command -v pdflatex &> /dev/null; then
              echo "‚úÖ LaTeX (pdflatex) is available"
          else
              echo "‚ö†Ô∏è  LaTeX (pdflatex) not found (TinyTeX might not be installed)"
          fi
          
          echo ""
          echo "üéâ Full installation test completed successfully!"

  test-download-commands:
    runs-on: ubuntu-latest
    name: Test Download Commands
    steps:
      - name: Test Windows PowerShell download command
        run: |
          echo "Testing Windows download command (syntax only on Linux)..."
          # Just verify the command structure is valid
          echo 'irm https://raw.githubusercontent.com/vnijs/radiant_install/main/windows-install-radiant.ps1 | iex'
          echo "‚úÖ Windows command syntax appears valid"

      - name: Test macOS download command
        run: |
          echo "Testing macOS download command..."
          # Test that the URL is reachable
          if curl -fsSL --head https://raw.githubusercontent.com/vnijs/radiant_install/main/macos-install-radiant.sh > /dev/null 2>&1; then
              echo "‚úÖ macOS installer URL is reachable"
          else
              echo "‚ö†Ô∏è  macOS installer URL not reachable (might not be deployed yet)"
          fi