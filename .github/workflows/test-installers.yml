name: Test Installation Scripts

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-windows-full-install:
    runs-on: windows-latest
    name: Test Windows Full Installation
    # Only run full install on manual trigger or main branch
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run full Windows installation
        shell: powershell
        run: |
          Write-Host "Running FULL Windows installation test..." -ForegroundColor Cyan
          Write-Host "This will actually install R, RStudio, and packages" -ForegroundColor Gray
          Write-Host ""
          
          # Set execution policy for this session
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
          
          # Run the actual installation script
          # Note: In CI, we'll auto-answer "N" to the R experience question if R is in Program Files
          $env:CI = "true"
          .\windows-install-radiant.ps1
          
      - name: Verify installations
        shell: powershell  
        run: |
          Write-Host "Verifying installations..." -ForegroundColor Cyan
          
          # Check R installation
          $RPath = Get-ChildItem "C:\R\R-*\bin\R.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($RPath) {
              Write-Host "R installed at: $($RPath.FullName)" -ForegroundColor Green
              $RVersion = & $RPath.FullName --version 2>&1 | Select-Object -First 1
              Write-Host "   Version: $RVersion" -ForegroundColor Gray
          } else {
              Write-Host "R not found in C:\R" -ForegroundColor Red
              # Check if mistakenly in Program Files
              if (Test-Path "${env:ProgramFiles}\R\R-*\bin\R.exe") {
                  Write-Host "R found in Program Files (not recommended)" -ForegroundColor Yellow
              }
              exit 1
          }
          
          # Check RStudio installation
          if (Test-Path "${env:ProgramFiles}\RStudio\rstudio.exe") {
              Write-Host "RStudio installed in Program Files\RStudio" -ForegroundColor Green
          } else {
              Write-Host "RStudio not found" -ForegroundColor Red
              exit 1
          }
          
          # Check 7-Zip installation
          $7ZipPath = Get-ChildItem -Path @(
              "${env:ProgramFiles}\7-Zip\7z.exe",
              "C:\Program Files (x86)\7-Zip\7z.exe"
          ) -ErrorAction SilentlyContinue | Select-Object -First 1
          
          if ($7ZipPath) {
              Write-Host "7-Zip installed at: $7ZipPath" -ForegroundColor Green
          } else {
              Write-Host "7-Zip not found" -ForegroundColor Yellow
          }
          
          # Check if key R packages are installed
          if ($RPath) {
              & $RPath.FullName -e "if ('radiant' %in% rownames(installed.packages())) cat('Radiant package installed\n') else stop('Radiant package not found')"
          }
          
          # Check if pdflatex is available (from TinyTeX)
          $pdflatex = Get-Command pdflatex -ErrorAction SilentlyContinue
          if ($pdflatex) {
              Write-Host "LaTeX (pdflatex) is available at: $($pdflatex.Path)" -ForegroundColor Green
          } else {
              Write-Host "LaTeX (pdflatex) not found (TinyTeX might not be installed)" -ForegroundColor Yellow
          }
          
          Write-Host ""
          Write-Host "Full installation test completed successfully!" -ForegroundColor Green

  test-windows:
    runs-on: windows-latest
    name: Test Windows Installer
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test PowerShell script syntax
        shell: powershell
        run: |
          Write-Host "Testing PowerShell script syntax..."
          $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content .\windows-install-radiant.ps1 -Raw), [ref]$null)
          Write-Host "Script syntax is valid"

      - name: Test script in dry-run mode (modified for CI)
        shell: powershell
        run: |
          Write-Host "Creating test version of script..."
          Write-Host "TEST MODE - Checking script logic without installing" -ForegroundColor Cyan
          Write-Host ""
          
          $ErrorActionPreference = "Stop"
          
          # Test temp directory creation
          $TEMP_DIR = New-TemporaryFile | ForEach-Object { Remove-Item $_; New-Item -ItemType Directory -Path $_ }
          Write-Host "Temp directory created: $TEMP_DIR"
          
          # Test R detection logic
          $SystemDrive = $env:SystemDrive
          Write-Host "System drive detected: $SystemDrive"
          
          # Test version checking
          Write-Host "Testing R version check..."
          try {
              $Response = Invoke-WebRequest -Uri "https://cloud.r-project.org/bin/windows/base/release.html" -MaximumRedirection 0 -ErrorAction SilentlyContinue
          } catch {
              if ($_.Exception.Response.StatusCode -eq 302) {
                  $RURL = $_.Exception.Response.Headers.Location.ToString()
                  if ($RURL -match "R-(\d+\.\d+\.\d+)-win.exe") {
                      Write-Host "Latest R version detected: $($matches[1])"
                      Write-Host "Download URL: $RURL"
                  }
              }
          }
          
          Write-Host "Testing RStudio version check..."
          $RStudioPage = Invoke-WebRequest -Uri "https://posit.co/download/rstudio-desktop/" -UseBasicParsing
          if ($RStudioPage.Content -match '//download1\.rstudio\.org/electron/windows/RStudio-([^"]+)\.exe') {
              $RStudioURL = "https:$($matches[0])"
              $Version = $matches[1] -replace '-', '+'
              Write-Host "Latest RStudio version detected: $Version"
              Write-Host "Download URL: $RStudioURL"
          }
          
          # Cleanup
          Remove-Item -Path $TEMP_DIR -Recurse -Force -ErrorAction SilentlyContinue
          Write-Host "Cleanup successful"
          
          Write-Host ""
          Write-Host "All script logic tests passed!" -ForegroundColor Green

      - name: Check required tools availability
        shell: powershell
        run: |
          Write-Host "Checking for required Windows tools..."
          
          # Check if Invoke-WebRequest is available
          if (Get-Command Invoke-WebRequest -ErrorAction SilentlyContinue) {
              Write-Host "Invoke-WebRequest is available"
          } else {
              Write-Host "Invoke-WebRequest is not available"
              exit 1
          }
          
          # Check if we can query Program Files
          if (Test-Path $env:ProgramFiles) {
              Write-Host "Can access Program Files directory"
          }
          
          # Check PowerShell version
          Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"